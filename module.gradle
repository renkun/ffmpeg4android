apply plugin: 'com.android.application'

android {
    //构建版本
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    signingConfigs {
        config {
            Properties buildProps = loadSignProperties()
            storeFile file(buildProps['STORE_FILE'])
            keyAlias buildProps['KEY_ALIAS']
            keyPassword buildProps['KEY_PASSWORD']
            storePassword buildProps['STORE_PASSWORD']
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.config
        }
        release {
            signingConfig signingConfigs.config
            zipAlignEnabled true
            debuggable false
            jniDebuggable false
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    //默认的配置
    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        externalNativeBuild {
            cmake {
                cppFlags ""
                arguments "-DANDROID_STL=c++_shared"
            }
            ndk {
                abiFilters "armeabi-v7a"//, "arm64-v8a", "x86", "x86_64", "armeabi", "mips",
            }
        }
        sourceSets {
            main {
                //库地址
                jniLibs.srcDirs = ['libs']
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

}

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation 'junit:junit:4.12'
    api rootProject.ext.dependencies["appcompat-v7"]
    api rootProject.ext.dependencies["design"]
    api project(':common')
    api project(':ffmpeg-single')
}

/**
 * 读取配置签名
 * @return
 */
def loadSignProperties() {
    Properties buildProperties = new Properties()
    buildProperties.load(new FileInputStream(file("$rootDir/config/sign.properties")))
    return buildProperties
}